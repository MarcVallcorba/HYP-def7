{
  "version": 3,
  "sources": ["../../@supabase/storage-js/src/lib/errors.ts", "../../@supabase/storage-js/src/lib/helpers.ts", "../../@supabase/storage-js/src/lib/fetch.ts", "../../@supabase/storage-js/src/packages/StorageFileApi.ts", "../../@supabase/storage-js/src/lib/version.ts", "../../@supabase/storage-js/src/lib/constants.ts", "../../@supabase/storage-js/src/packages/StorageBucketApi.ts", "../../@supabase/storage-js/src/StorageClient.ts"],
  "sourcesContent": ["export class StorageError extends Error {\r\n  protected __isStorageError = true\r\n\r\n  constructor(message: string) {\r\n    super(message)\r\n    this.name = 'StorageError'\r\n  }\r\n}\r\n\r\nexport function isStorageError(error: unknown): error is StorageError {\r\n  return typeof error === 'object' && error !== null && '__isStorageError' in error\r\n}\r\n\r\nexport class StorageApiError extends StorageError {\r\n  status: number\r\n\r\n  constructor(message: string, status: number) {\r\n    super(message)\r\n    this.name = 'StorageApiError'\r\n    this.status = status\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      name: this.name,\r\n      message: this.message,\r\n      status: this.status,\r\n    }\r\n  }\r\n}\r\n\r\nexport class StorageUnknownError extends StorageError {\r\n  originalError: unknown\r\n\r\n  constructor(message: string, originalError: unknown) {\r\n    super(message)\r\n    this.name = 'StorageUnknownError'\r\n    this.originalError = originalError\r\n  }\r\n}\r\n", "type Fetch = typeof fetch\r\n\r\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\r\n  let _fetch: Fetch\r\n  if (customFetch) {\r\n    _fetch = customFetch\r\n  } else if (typeof fetch === 'undefined') {\r\n    _fetch = async (...args) => await (await import('cross-fetch')).fetch(...args)\r\n  } else {\r\n    _fetch = fetch\r\n  }\r\n  return (...args) => _fetch(...args)\r\n}\r\n\r\nexport const resolveResponse = async () => {\r\n  if (typeof Response === 'undefined') {\r\n    return (await import('cross-fetch')).Response\r\n  }\r\n\r\n  return Response\r\n}\r\n", "import { StorageApiError, StorageUnknownError } from './errors'\r\nimport { resolveResponse } from './helpers'\r\nimport { FetchParameters } from './types'\r\n\r\nexport type Fetch = typeof fetch\r\n\r\nexport interface FetchOptions {\r\n  headers?: {\r\n    [key: string]: string\r\n  }\r\n  noResolveJson?: boolean\r\n}\r\n\r\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE'\r\n\r\nconst _getErrorMessage = (err: any): string =>\r\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\r\n\r\nconst handleError = async (error: unknown, reject: (reason?: any) => void) => {\r\n  const Res = await resolveResponse()\r\n\r\n  if (error instanceof Res) {\r\n    error\r\n      .json()\r\n      .then((err) => {\r\n        reject(new StorageApiError(_getErrorMessage(err), error.status || 500))\r\n      })\r\n      .catch((err) => {\r\n        reject(new StorageUnknownError(_getErrorMessage(err), err))\r\n      })\r\n  } else {\r\n    reject(new StorageUnknownError(_getErrorMessage(error), error))\r\n  }\r\n}\r\n\r\nconst _getRequestParams = (\r\n  method: RequestMethodType,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters,\r\n  body?: object\r\n) => {\r\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\r\n\r\n  if (method === 'GET') {\r\n    return params\r\n  }\r\n\r\n  params.headers = { 'Content-Type': 'application/json', ...options?.headers }\r\n  params.body = JSON.stringify(body)\r\n  return { ...params, ...parameters }\r\n}\r\n\r\nasync function _handleRequest(\r\n  fetcher: Fetch,\r\n  method: RequestMethodType,\r\n  url: string,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters,\r\n  body?: object\r\n): Promise<any> {\r\n  return new Promise((resolve, reject) => {\r\n    fetcher(url, _getRequestParams(method, options, parameters, body))\r\n      .then((result) => {\r\n        if (!result.ok) throw result\r\n        if (options?.noResolveJson) return result\r\n        return result.json()\r\n      })\r\n      .then((data) => resolve(data))\r\n      .catch((error) => handleError(error, reject))\r\n  })\r\n}\r\n\r\nexport async function get(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'GET', url, options, parameters)\r\n}\r\n\r\nexport async function post(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  body: object,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'POST', url, options, parameters, body)\r\n}\r\n\r\nexport async function put(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  body: object,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'PUT', url, options, parameters, body)\r\n}\r\n\r\nexport async function remove(\r\n  fetcher: Fetch,\r\n  url: string,\r\n  body: object,\r\n  options?: FetchOptions,\r\n  parameters?: FetchParameters\r\n): Promise<any> {\r\n  return _handleRequest(fetcher, 'DELETE', url, options, parameters, body)\r\n}\r\n", "import { isStorageError, StorageError } from '../lib/errors'\r\nimport { Fetch, get, post, remove } from '../lib/fetch'\r\nimport { resolveFetch } from '../lib/helpers'\r\nimport {\r\n  FileObject,\r\n  FileOptions,\r\n  SearchOptions,\r\n  FetchParameters,\r\n  TransformOptions,\r\n} from '../lib/types'\r\n\r\nconst DEFAULT_SEARCH_OPTIONS = {\r\n  limit: 100,\r\n  offset: 0,\r\n  sortBy: {\r\n    column: 'name',\r\n    order: 'asc',\r\n  },\r\n}\r\n\r\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\r\n  cacheControl: '3600',\r\n  contentType: 'text/plain;charset=UTF-8',\r\n  upsert: false,\r\n}\r\n\r\ntype FileBody =\r\n  | ArrayBuffer\r\n  | ArrayBufferView\r\n  | Blob\r\n  | Buffer\r\n  | File\r\n  | FormData\r\n  | NodeJS.ReadableStream\r\n  | ReadableStream<Uint8Array>\r\n  | URLSearchParams\r\n  | string\r\n\r\nexport default class StorageFileApi {\r\n  protected url: string\r\n  protected headers: { [key: string]: string }\r\n  protected bucketId?: string\r\n  protected fetch: Fetch\r\n\r\n  constructor(\r\n    url: string,\r\n    headers: { [key: string]: string } = {},\r\n    bucketId?: string,\r\n    fetch?: Fetch\r\n  ) {\r\n    this.url = url\r\n    this.headers = headers\r\n    this.bucketId = bucketId\r\n    this.fetch = resolveFetch(fetch)\r\n  }\r\n\r\n  /**\r\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param method HTTP method.\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  private async uploadOrUpdate(\r\n    method: 'POST' | 'PUT',\r\n    path: string,\r\n    fileBody: FileBody,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let body\r\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\r\n      const headers: Record<string, string> = {\r\n        ...this.headers,\r\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\r\n      }\r\n\r\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n        body = new FormData()\r\n        body.append('cacheControl', options.cacheControl as string)\r\n        body.append('', fileBody)\r\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n        body = fileBody\r\n        body.append('cacheControl', options.cacheControl as string)\r\n      } else {\r\n        body = fileBody\r\n        headers['cache-control'] = `max-age=${options.cacheControl}`\r\n        headers['content-type'] = options.contentType as string\r\n      }\r\n\r\n      const cleanPath = this._removeEmptyFolders(path)\r\n      const _path = this._getFinalPath(cleanPath)\r\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\r\n        method,\r\n        body: body as BodyInit,\r\n        headers,\r\n        ...(options?.duplex ? { duplex: options.duplex } : {}),\r\n      })\r\n\r\n      if (res.ok) {\r\n        return {\r\n          data: { path: cleanPath },\r\n          error: null,\r\n        }\r\n      } else {\r\n        const error = await res.json()\r\n        return { data: null, error }\r\n      }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Uploads a file to an existing bucket.\r\n   *\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async upload(\r\n    path: string,\r\n    fileBody: FileBody,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\r\n  }\r\n\r\n  /**\r\n   * Upload a file with a token generated from `createSignedUploadUrl`.\r\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n   * @param token The token generated from `createSignedUploadUrl`\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async uploadToSignedUrl(\r\n    path: string,\r\n    token: string,\r\n    fileBody: FileBody,\r\n    fileOptions?: FileOptions\r\n  ) {\r\n    const cleanPath = this._removeEmptyFolders(path)\r\n    const _path = this._getFinalPath(cleanPath)\r\n\r\n    const url = new URL(this.url + `/object/upload/sign/${_path}`)\r\n    url.searchParams.set('token', token)\r\n\r\n    try {\r\n      let body\r\n      const options = { upsert: DEFAULT_FILE_OPTIONS.upsert, ...fileOptions }\r\n      const headers: Record<string, string> = {\r\n        ...this.headers,\r\n        ...{ 'x-upsert': String(options.upsert as boolean) },\r\n      }\r\n\r\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n        body = new FormData()\r\n        body.append('cacheControl', options.cacheControl as string)\r\n        body.append('', fileBody)\r\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n        body = fileBody\r\n        body.append('cacheControl', options.cacheControl as string)\r\n      } else {\r\n        body = fileBody\r\n        headers['cache-control'] = `max-age=${options.cacheControl}`\r\n        headers['content-type'] = options.contentType as string\r\n      }\r\n\r\n      const res = await this.fetch(url.toString(), {\r\n        method: 'PUT',\r\n        body: body as BodyInit,\r\n        headers,\r\n      })\r\n\r\n      if (res.ok) {\r\n        return {\r\n          data: { path: cleanPath },\r\n          error: null,\r\n        }\r\n      } else {\r\n        const error = await res.json()\r\n        return { data: null, error }\r\n      }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a signed upload URL.\r\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\r\n   * They are valid for one minute.\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   */\r\n  async createSignedUploadUrl(\r\n    path: string\r\n  ): Promise<\r\n    | {\r\n        data: { signedUrl: string; token: string; path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let _path = this._getFinalPath(path)\r\n\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/upload/sign/${_path}`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n\r\n      const url = new URL(this.url + data.url)\r\n\r\n      const token = url.searchParams.get('token')\r\n\r\n      if (!token) {\r\n        throw new StorageError('No token returned by API')\r\n      }\r\n\r\n      return { data: { signedUrl: url.toString(), path, token }, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Replaces an existing file at the specified path with a new one.\r\n   *\r\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\r\n   * @param fileBody The body of the file to be stored in the bucket.\r\n   */\r\n  async update(\r\n    path: string,\r\n    fileBody:\r\n      | ArrayBuffer\r\n      | ArrayBufferView\r\n      | Blob\r\n      | Buffer\r\n      | File\r\n      | FormData\r\n      | NodeJS.ReadableStream\r\n      | ReadableStream<Uint8Array>\r\n      | URLSearchParams\r\n      | string,\r\n    fileOptions?: FileOptions\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\r\n  }\r\n\r\n  /**\r\n   * Moves an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\r\n   */\r\n  async move(\r\n    fromPath: string,\r\n    toPath: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/move`,\r\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copies an existing file to a new path in the same bucket.\r\n   *\r\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\r\n   */\r\n  async copy(\r\n    fromPath: string,\r\n    toPath: string\r\n  ): Promise<\r\n    | {\r\n        data: { path: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/copy`,\r\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\r\n        { headers: this.headers }\r\n      )\r\n      return { data: { path: data.Key }, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param path The file path, including the current file name. For example `folder/image.png`.\r\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  async createSignedUrl(\r\n    path: string,\r\n    expiresIn: number,\r\n    options?: { download?: string | boolean; transform?: TransformOptions }\r\n  ): Promise<\r\n    | {\r\n        data: { signedUrl: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      let _path = this._getFinalPath(path)\r\n\r\n      let data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/sign/${_path}`,\r\n        { expiresIn, ...(options?.transform ? { transform: options.transform } : {}) },\r\n        { headers: this.headers }\r\n      )\r\n      const downloadQueryParam = options?.download\r\n        ? `&download=${options.download === true ? '' : options.download}`\r\n        : ''\r\n      const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`)\r\n      data = { signedUrl }\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\r\n   *\r\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\r\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\r\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   */\r\n  async createSignedUrls(\r\n    paths: string[],\r\n    expiresIn: number,\r\n    options?: { download: string | boolean }\r\n  ): Promise<\r\n    | {\r\n        data: { error: string | null; path: string | null; signedUrl: string }[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/sign/${this.bucketId}`,\r\n        { expiresIn, paths },\r\n        { headers: this.headers }\r\n      )\r\n\r\n      const downloadQueryParam = options?.download\r\n        ? `&download=${options.download === true ? '' : options.download}`\r\n        : ''\r\n      return {\r\n        data: data.map((datum: { signedURL: string }) => ({\r\n          ...datum,\r\n          signedUrl: datum.signedURL\r\n            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\r\n            : null,\r\n        })),\r\n        error: null,\r\n      }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\r\n   *\r\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  async download(\r\n    path: string,\r\n    options?: { transform?: TransformOptions }\r\n  ): Promise<\r\n    | {\r\n        data: Blob\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    const wantsTransformation = typeof options?.transform !== 'undefined'\r\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object'\r\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\r\n    const queryString = transformationQuery ? `?${transformationQuery}` : ''\r\n\r\n    try {\r\n      const _path = this._getFinalPath(path)\r\n      const res = await get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\r\n        headers: this.headers,\r\n        noResolveJson: true,\r\n      })\r\n      const data = await res.blob()\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\r\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\r\n   *\r\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\r\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n   * @param options.transform Transform the asset before serving it to the client.\r\n   */\r\n  getPublicUrl(\r\n    path: string,\r\n    options?: { download?: string | boolean; transform?: TransformOptions }\r\n  ): { data: { publicUrl: string } } {\r\n    const _path = this._getFinalPath(path)\r\n    const _queryString = []\r\n\r\n    const downloadQueryParam = options?.download\r\n      ? `download=${options.download === true ? '' : options.download}`\r\n      : ''\r\n\r\n    if (downloadQueryParam !== '') {\r\n      _queryString.push(downloadQueryParam)\r\n    }\r\n\r\n    const wantsTransformation = typeof options?.transform !== 'undefined'\r\n    const renderPath = wantsTransformation ? 'render/image' : 'object'\r\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\r\n\r\n    if (transformationQuery !== '') {\r\n      _queryString.push(transformationQuery)\r\n    }\r\n\r\n    let queryString = _queryString.join('&')\r\n    if (queryString !== '') {\r\n      queryString = `?${queryString}`\r\n    }\r\n\r\n    return {\r\n      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes files within the same bucket\r\n   *\r\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\r\n   */\r\n  async remove(\r\n    paths: string[]\r\n  ): Promise<\r\n    | {\r\n        data: FileObject[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await remove(\r\n        this.fetch,\r\n        `${this.url}/object/${this.bucketId}`,\r\n        { prefixes: paths },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get file metadata\r\n   * @param id the file id to retrieve metadata\r\n   */\r\n  // async getMetadata(\r\n  //   id: string\r\n  // ): Promise<\r\n  //   | {\r\n  //       data: Metadata\r\n  //       error: null\r\n  //     }\r\n  //   | {\r\n  //       data: null\r\n  //       error: StorageError\r\n  //     }\r\n  // > {\r\n  //   try {\r\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\r\n  //     return { data, error: null }\r\n  //   } catch (error) {\r\n  //     if (isStorageError(error)) {\r\n  //       return { data: null, error }\r\n  //     }\r\n\r\n  //     throw error\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Update file metadata\r\n   * @param id the file id to update metadata\r\n   * @param meta the new file metadata\r\n   */\r\n  // async updateMetadata(\r\n  //   id: string,\r\n  //   meta: Metadata\r\n  // ): Promise<\r\n  //   | {\r\n  //       data: Metadata\r\n  //       error: null\r\n  //     }\r\n  //   | {\r\n  //       data: null\r\n  //       error: StorageError\r\n  //     }\r\n  // > {\r\n  //   try {\r\n  //     const data = await post(\r\n  //       this.fetch,\r\n  //       `${this.url}/metadata/${id}`,\r\n  //       { ...meta },\r\n  //       { headers: this.headers }\r\n  //     )\r\n  //     return { data, error: null }\r\n  //   } catch (error) {\r\n  //     if (isStorageError(error)) {\r\n  //       return { data: null, error }\r\n  //     }\r\n\r\n  //     throw error\r\n  //   }\r\n  // }\r\n\r\n  /**\r\n   * Lists all the files within a bucket.\r\n   * @param path The folder path.\r\n   */\r\n  async list(\r\n    path?: string,\r\n    options?: SearchOptions,\r\n    parameters?: FetchParameters\r\n  ): Promise<\r\n    | {\r\n        data: FileObject[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/object/list/${this.bucketId}`,\r\n        body,\r\n        { headers: this.headers },\r\n        parameters\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private _getFinalPath(path: string) {\r\n    return `${this.bucketId}/${path}`\r\n  }\r\n\r\n  private _removeEmptyFolders(path: string) {\r\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\r\n  }\r\n\r\n  private transformOptsToQueryString(transform: TransformOptions) {\r\n    const params = []\r\n    if (transform.width) {\r\n      params.push(`width=${transform.width}`)\r\n    }\r\n\r\n    if (transform.height) {\r\n      params.push(`height=${transform.height}`)\r\n    }\r\n\r\n    if (transform.resize) {\r\n      params.push(`resize=${transform.resize}`)\r\n    }\r\n\r\n    if (transform.format) {\r\n      params.push(`format=${transform.format}`)\r\n    }\r\n\r\n    if (transform.quality) {\r\n      params.push(`quality=${transform.quality}`)\r\n    }\r\n\r\n    return params.join('&')\r\n  }\r\n}\r\n", "// generated by genversion\r\nexport const version = '2.5.1'\r\n", "import { version } from './version'\r\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `storage-js/${version}` }\r\n", "import { DEFAULT_HEADERS } from '../lib/constants'\r\nimport { isStorageError, StorageError } from '../lib/errors'\r\nimport { Fetch, get, post, put, remove } from '../lib/fetch'\r\nimport { resolveFetch } from '../lib/helpers'\r\nimport { Bucket } from '../lib/types'\r\n\r\nexport default class StorageBucketApi {\r\n  protected url: string\r\n  protected headers: { [key: string]: string }\r\n  protected fetch: Fetch\r\n\r\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\r\n    this.url = url\r\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\r\n    this.fetch = resolveFetch(fetch)\r\n  }\r\n\r\n  /**\r\n   * Retrieves the details of all Storage buckets within an existing project.\r\n   */\r\n  async listBuckets(): Promise<\r\n    | {\r\n        data: Bucket[]\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the details of an existing Storage bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to retrieve.\r\n   */\r\n  async getBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: Bucket\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a new Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are creating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\r\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\r\n   * The global file size limit takes precedence over this value.\r\n   * The default value is null, which doesn't set a per bucket file size limit.\r\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\r\n   * The default value is null, which allows files with all mime types to be uploaded.\r\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\r\n   * @returns newly created bucket id\r\n   */\r\n  async createBucket(\r\n    id: string,\r\n    options: {\r\n      public: boolean\r\n      fileSizeLimit?: number | string | null\r\n      allowedMimeTypes?: string[] | null\r\n    } = {\r\n      public: false,\r\n    }\r\n  ): Promise<\r\n    | {\r\n        data: Pick<Bucket, 'name'>\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/bucket`,\r\n        {\r\n          id,\r\n          name: id,\r\n          public: options.public,\r\n          file_size_limit: options.fileSizeLimit,\r\n          allowed_mime_types: options.allowedMimeTypes,\r\n        },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates a Storage bucket\r\n   *\r\n   * @param id A unique identifier for the bucket you are updating.\r\n   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\r\n   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\r\n   * The global file size limit takes precedence over this value.\r\n   * The default value is null, which doesn't set a per bucket file size limit.\r\n   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\r\n   * The default value is null, which allows files with all mime types to be uploaded.\r\n   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\r\n   */\r\n  async updateBucket(\r\n    id: string,\r\n    options: {\r\n      public: boolean\r\n      fileSizeLimit?: number | string | null\r\n      allowedMimeTypes?: string[] | null\r\n    }\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await put(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}`,\r\n        {\r\n          id,\r\n          name: id,\r\n          public: options.public,\r\n          file_size_limit: options.fileSizeLimit,\r\n          allowed_mime_types: options.allowedMimeTypes,\r\n        },\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all objects inside a single bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to empty.\r\n   */\r\n  async emptyBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await post(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}/empty`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\r\n   * You must first `empty()` the bucket.\r\n   *\r\n   * @param id The unique identifier of the bucket you would like to delete.\r\n   */\r\n  async deleteBucket(\r\n    id: string\r\n  ): Promise<\r\n    | {\r\n        data: { message: string }\r\n        error: null\r\n      }\r\n    | {\r\n        data: null\r\n        error: StorageError\r\n      }\r\n  > {\r\n    try {\r\n      const data = await remove(\r\n        this.fetch,\r\n        `${this.url}/bucket/${id}`,\r\n        {},\r\n        { headers: this.headers }\r\n      )\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      if (isStorageError(error)) {\r\n        return { data: null, error }\r\n      }\r\n\r\n      throw error\r\n    }\r\n  }\r\n}\r\n", "import StorageFileApi from './packages/StorageFileApi'\r\nimport StorageBucketApi from './packages/StorageBucketApi'\r\nimport { Fetch } from './lib/fetch'\r\n\r\nexport class StorageClient extends StorageBucketApi {\r\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\r\n    super(url, headers, fetch)\r\n  }\r\n\r\n  /**\r\n   * Perform file operation in a bucket.\r\n   *\r\n   * @param id The bucket id to operate on.\r\n   */\r\n  from(id: string): StorageFileApi {\r\n    return new StorageFileApi(this.url, this.headers, id, this.fetch)\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["__awaiter", "fetch", "fetch", "fetch"]
}
