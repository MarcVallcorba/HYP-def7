{
  "version": 3,
  "sources": ["../../@supabase/supabase-js/src/lib/version.ts", "../../@supabase/supabase-js/src/lib/constants.ts", "../../@supabase/supabase-js/src/lib/fetch.ts", "../../@supabase/supabase-js/src/lib/helpers.ts", "../../@supabase/supabase-js/src/lib/SupabaseAuthClient.ts", "../../@supabase/supabase-js/src/SupabaseClient.ts", "../../@supabase/supabase-js/src/index.ts"],
  "sourcesContent": ["export const version = '2.24.0'\r\n", "// constants.ts\r\nimport { version } from './version'\r\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js/${version}` }\r\n", "import crossFetch, { Headers as CrossFetchHeaders } from 'cross-fetch'\r\n\r\ntype Fetch = typeof fetch\r\n\r\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\r\n  let _fetch: Fetch\r\n  if (customFetch) {\r\n    _fetch = customFetch\r\n  } else if (typeof fetch === 'undefined') {\r\n    _fetch = crossFetch as unknown as Fetch\r\n  } else {\r\n    _fetch = fetch\r\n  }\r\n  return (...args) => _fetch(...args)\r\n}\r\n\r\nexport const resolveHeadersConstructor = () => {\r\n  if (typeof Headers === 'undefined') {\r\n    return CrossFetchHeaders\r\n  }\r\n\r\n  return Headers\r\n}\r\n\r\nexport const fetchWithAuth = (\r\n  supabaseKey: string,\r\n  getAccessToken: () => Promise<string | null>,\r\n  customFetch?: Fetch\r\n): Fetch => {\r\n  const fetch = resolveFetch(customFetch)\r\n  const HeadersConstructor = resolveHeadersConstructor()\r\n\r\n  return async (input, init) => {\r\n    const accessToken = (await getAccessToken()) ?? supabaseKey\r\n    let headers = new HeadersConstructor(init?.headers)\r\n\r\n    if (!headers.has('apikey')) {\r\n      headers.set('apikey', supabaseKey)\r\n    }\r\n\r\n    if (!headers.has('Authorization')) {\r\n      headers.set('Authorization', `Bearer ${accessToken}`)\r\n    }\r\n\r\n    return fetch(input, { ...init, headers })\r\n  }\r\n}\r\n", "// helpers.ts\r\nimport { SupabaseClientOptions } from './types'\r\n\r\nexport function uuid() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c == 'x' ? r : (r & 0x3) | 0x8\r\n    return v.toString(16)\r\n  })\r\n}\r\n\r\nexport function stripTrailingSlash(url: string): string {\r\n  return url.replace(/\\/$/, '')\r\n}\r\n\r\nexport const isBrowser = () => typeof window !== 'undefined'\r\n\r\nexport function applySettingDefaults<\r\n  Database = any,\r\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\r\n    ? 'public'\r\n    : string & keyof Database\r\n>(\r\n  options: SupabaseClientOptions<SchemaName>,\r\n  defaults: SupabaseClientOptions<any>\r\n): SupabaseClientOptions<SchemaName> {\r\n  const {\r\n    db: dbOptions,\r\n    auth: authOptions,\r\n    realtime: realtimeOptions,\r\n    global: globalOptions,\r\n  } = options\r\n  const {\r\n    db: DEFAULT_DB_OPTIONS,\r\n    auth: DEFAULT_AUTH_OPTIONS,\r\n    realtime: DEFAULT_REALTIME_OPTIONS,\r\n    global: DEFAULT_GLOBAL_OPTIONS,\r\n  } = defaults\r\n\r\n  return {\r\n    db: {\r\n      ...DEFAULT_DB_OPTIONS,\r\n      ...dbOptions,\r\n    },\r\n    auth: {\r\n      ...DEFAULT_AUTH_OPTIONS,\r\n      ...authOptions,\r\n    },\r\n    realtime: {\r\n      ...DEFAULT_REALTIME_OPTIONS,\r\n      ...realtimeOptions,\r\n    },\r\n    global: {\r\n      ...DEFAULT_GLOBAL_OPTIONS,\r\n      ...globalOptions,\r\n    },\r\n  }\r\n}\r\n", "import { GoTrueClient } from '@supabase/gotrue-js'\r\nimport { SupabaseAuthClientOptions } from './types'\r\n\r\nexport class SupabaseAuthClient extends GoTrueClient {\r\n  constructor(options: SupabaseAuthClientOptions) {\r\n    super(options)\r\n  }\r\n}\r\n", "import { FunctionsClient } from '@supabase/functions-js'\r\nimport { AuthChangeEvent } from '@supabase/gotrue-js'\r\nimport {\r\n  PostgrestClient,\r\n  PostgrestFilterBuilder,\r\n  PostgrestQueryBuilder,\r\n} from '@supabase/postgrest-js'\r\nimport {\r\n  RealtimeChannel,\r\n  RealtimeChannelOptions,\r\n  RealtimeClient,\r\n  RealtimeClientOptions,\r\n} from '@supabase/realtime-js'\r\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\r\nimport { DEFAULT_HEADERS } from './lib/constants'\r\nimport { fetchWithAuth } from './lib/fetch'\r\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers'\r\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\r\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\r\n\r\nconst DEFAULT_GLOBAL_OPTIONS = {\r\n  headers: DEFAULT_HEADERS,\r\n}\r\n\r\nconst DEFAULT_DB_OPTIONS = {\r\n  schema: 'public',\r\n}\r\n\r\nconst DEFAULT_AUTH_OPTIONS: SupabaseAuthClientOptions = {\r\n  autoRefreshToken: true,\r\n  persistSession: true,\r\n  detectSessionInUrl: true,\r\n  flowType: 'implicit',\r\n}\r\n\r\nconst DEFAULT_REALTIME_OPTIONS: RealtimeClientOptions = {}\r\n\r\n/**\r\n * Supabase Client.\r\n *\r\n * An isomorphic Javascript client for interacting with Postgres.\r\n */\r\nexport default class SupabaseClient<\r\n  Database = any,\r\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\r\n    ? 'public'\r\n    : string & keyof Database,\r\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\r\n    ? Database[SchemaName]\r\n    : any\r\n> {\r\n  /**\r\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\r\n   */\r\n  auth: SupabaseAuthClient\r\n  realtime: RealtimeClient\r\n\r\n  protected realtimeUrl: string\r\n  protected authUrl: string\r\n  protected storageUrl: string\r\n  protected functionsUrl: string\r\n  protected rest: PostgrestClient<Database, SchemaName>\r\n  protected storageKey: string\r\n  protected fetch?: Fetch\r\n  protected changedAccessToken: string | undefined\r\n\r\n  protected headers: {\r\n    [key: string]: string\r\n  }\r\n\r\n  /**\r\n   * Create a new client for use in the browser.\r\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\r\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\r\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\r\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\r\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\r\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\r\n   * @param options.realtime Options passed along to realtime-js constructor.\r\n   * @param options.global.fetch A custom fetch implementation.\r\n   * @param options.global.headers Any additional headers to send with each network request.\r\n   */\r\n  constructor(\r\n    protected supabaseUrl: string,\r\n    protected supabaseKey: string,\r\n    options?: SupabaseClientOptions<SchemaName>\r\n  ) {\r\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\r\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\r\n\r\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\r\n\r\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws')\r\n    this.authUrl = `${_supabaseUrl}/auth/v1`\r\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\r\n    this.functionsUrl = `${_supabaseUrl}/functions/v1`\r\n\r\n    // default storage key uses the supabase project ref as a namespace\r\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`\r\n    const DEFAULTS = {\r\n      db: DEFAULT_DB_OPTIONS,\r\n      realtime: DEFAULT_REALTIME_OPTIONS,\r\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\r\n      global: DEFAULT_GLOBAL_OPTIONS,\r\n    }\r\n\r\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\r\n\r\n    this.storageKey = settings.auth?.storageKey ?? ''\r\n    this.headers = settings.global?.headers ?? {}\r\n\r\n    this.auth = this._initSupabaseAuthClient(\r\n      settings.auth ?? {},\r\n      this.headers,\r\n      settings.global?.fetch\r\n    )\r\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global?.fetch)\r\n\r\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\r\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\r\n      headers: this.headers,\r\n      schema: settings.db?.schema,\r\n      fetch: this.fetch,\r\n    })\r\n\r\n    this._listenForAuthEvents()\r\n  }\r\n\r\n  /**\r\n   * Supabase Functions allows you to deploy and invoke edge functions.\r\n   */\r\n  get functions() {\r\n    return new FunctionsClient(this.functionsUrl, {\r\n      headers: this.headers,\r\n      customFetch: this.fetch,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\r\n   */\r\n  get storage() {\r\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch)\r\n  }\r\n\r\n  from<\r\n    TableName extends string & keyof Schema['Tables'],\r\n    Table extends Schema['Tables'][TableName]\r\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table>\r\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\r\n    relation: ViewName\r\n  ): PostgrestQueryBuilder<Schema, View>\r\n  from(relation: string): PostgrestQueryBuilder<Schema, any>\r\n  /**\r\n   * Perform a query on a table or a view.\r\n   *\r\n   * @param relation - The table or view name to query\r\n   */\r\n  from(relation: string): PostgrestQueryBuilder<Schema, any> {\r\n    return this.rest.from(relation)\r\n  }\r\n\r\n  /**\r\n   * Perform a function call.\r\n   *\r\n   * @param fn - The function name to call\r\n   * @param args - The arguments to pass to the function call\r\n   * @param options - Named parameters\r\n   * @param options.head - When set to `true`, `data` will not be returned.\r\n   * Useful if you only need the count.\r\n   * @param options.count - Count algorithm to use to count rows returned by the\r\n   * function. Only applicable for [set-returning\r\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\r\n   *\r\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n   * hood.\r\n   *\r\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n   * statistics under the hood.\r\n   *\r\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n   * numbers.\r\n   */\r\n  rpc<\r\n    FunctionName extends string & keyof Schema['Functions'],\r\n    Function_ extends Schema['Functions'][FunctionName]\r\n  >(\r\n    fn: FunctionName,\r\n    args: Function_['Args'] = {},\r\n    options?: {\r\n      head?: boolean\r\n      count?: 'exact' | 'planned' | 'estimated'\r\n    }\r\n  ): PostgrestFilterBuilder<\r\n    Schema,\r\n    Function_['Returns'] extends any[]\r\n      ? Function_['Returns'][number] extends Record<string, unknown>\r\n        ? Function_['Returns'][number]\r\n        : never\r\n      : never,\r\n    Function_['Returns']\r\n  > {\r\n    return this.rest.rpc(fn, args, options)\r\n  }\r\n\r\n  /**\r\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\r\n   *\r\n   * @param {string} name - The name of the Realtime channel.\r\n   * @param {Object} opts - The options to pass to the Realtime channel.\r\n   *\r\n   */\r\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\r\n    return this.realtime.channel(name, opts)\r\n  }\r\n\r\n  /**\r\n   * Returns all Realtime channels.\r\n   */\r\n  getChannels(): RealtimeChannel[] {\r\n    return this.realtime.getChannels()\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes Realtime channel from Realtime client.\r\n   *\r\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\r\n   *\r\n   */\r\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\r\n    return this.realtime.removeChannel(channel)\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes and removes all Realtime channels from Realtime client.\r\n   */\r\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\r\n    return this.realtime.removeAllChannels()\r\n  }\r\n\r\n  private async _getAccessToken() {\r\n    const { data } = await this.auth.getSession()\r\n\r\n    return data.session?.access_token ?? null\r\n  }\r\n\r\n  private _initSupabaseAuthClient(\r\n    {\r\n      autoRefreshToken,\r\n      persistSession,\r\n      detectSessionInUrl,\r\n      storage,\r\n      storageKey,\r\n      flowType,\r\n    }: SupabaseAuthClientOptions,\r\n    headers?: Record<string, string>,\r\n    fetch?: Fetch\r\n  ) {\r\n    const authHeaders = {\r\n      Authorization: `Bearer ${this.supabaseKey}`,\r\n      apikey: `${this.supabaseKey}`,\r\n    }\r\n    return new SupabaseAuthClient({\r\n      url: this.authUrl,\r\n      headers: { ...authHeaders, ...headers },\r\n      storageKey: storageKey,\r\n      autoRefreshToken,\r\n      persistSession,\r\n      detectSessionInUrl,\r\n      storage,\r\n      flowType,\r\n      fetch,\r\n    })\r\n  }\r\n\r\n  private _initRealtimeClient(options: RealtimeClientOptions) {\r\n    return new RealtimeClient(this.realtimeUrl, {\r\n      ...options,\r\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\r\n    })\r\n  }\r\n\r\n  private _listenForAuthEvents() {\r\n    let data = this.auth.onAuthStateChange((event, session) => {\r\n      this._handleTokenChanged(event, session?.access_token, 'CLIENT')\r\n    })\r\n    return data\r\n  }\r\n\r\n  private _handleTokenChanged(\r\n    event: AuthChangeEvent,\r\n    token: string | undefined,\r\n    source: 'CLIENT' | 'STORAGE'\r\n  ) {\r\n    if (\r\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\r\n      this.changedAccessToken !== token\r\n    ) {\r\n      // Token has changed\r\n      this.realtime.setAuth(token ?? null)\r\n\r\n      this.changedAccessToken = token\r\n    } else if (event === 'SIGNED_OUT') {\r\n      // Token is removed\r\n      this.realtime.setAuth(this.supabaseKey)\r\n      if (source == 'STORAGE') this.auth.signOut()\r\n      this.changedAccessToken = undefined\r\n    }\r\n  }\r\n}\r\n", "import SupabaseClient from './SupabaseClient'\r\nimport type { GenericSchema, SupabaseClientOptions } from './lib/types'\r\n\r\nexport * from '@supabase/gotrue-js'\r\nexport type { User as AuthUser, Session as AuthSession } from '@supabase/gotrue-js'\r\nexport type {\r\n  PostgrestResponse,\r\n  PostgrestSingleResponse,\r\n  PostgrestMaybeSingleResponse,\r\n  PostgrestError,\r\n} from '@supabase/postgrest-js'\r\nexport {\r\n  FunctionsHttpError,\r\n  FunctionsFetchError,\r\n  FunctionsRelayError,\r\n  FunctionsError,\r\n} from '@supabase/functions-js'\r\nexport * from '@supabase/realtime-js'\r\nexport { default as SupabaseClient } from './SupabaseClient'\r\nexport type { SupabaseClientOptions } from './lib/types'\r\n\r\n/**\r\n * Creates a new Supabase Client.\r\n */\r\nexport const createClient = <\r\n  Database = any,\r\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\r\n    ? 'public'\r\n    : string & keyof Database,\r\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\r\n    ? Database[SchemaName]\r\n    : any\r\n>(\r\n  supabaseUrl: string,\r\n  supabaseKey: string,\r\n  options?: SupabaseClientOptions<SchemaName>\r\n): SupabaseClient<Database, SchemaName, Schema> => {\r\n  return new SupabaseClient(supabaseUrl, supabaseKey, options)\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAM,UAAU;;;ACEhB,IAAM,kBAAkB,EAAE,iBAAiB,eAAe,UAAS;;;ACF1E,yBAAyD;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIlD,IAAM,eAAe,CAAC,gBAA8B;AACzD,MAAI;AACJ,MAAI,aAAa;AACf,aAAS;aACA,OAAO,UAAU,aAAa;AACvC,aAAS,mBAAAA;SACJ;AACL,aAAS;;AAEX,SAAO,IAAI,SAAS,OAAO,GAAG,IAAI;AACpC;AAEO,IAAM,4BAA4B,MAAK;AAC5C,MAAI,OAAO,YAAY,aAAa;AAClC,WAAO,mBAAAC;;AAGT,SAAO;AACT;AAEO,IAAM,gBAAgB,CAC3B,aACA,gBACA,gBACS;AACT,QAAMC,SAAQ,aAAa,WAAW;AACtC,QAAM,qBAAqB,0BAAyB;AAEpD,SAAO,CAAO,OAAO,SAAQ,UAAA,QAAA,QAAA,QAAA,aAAA;;AAC3B,UAAM,eAAc,KAAC,MAAM,eAAc,OAAG,QAAA,OAAA,SAAA,KAAI;AAChD,QAAI,UAAU,IAAI,mBAAmB,SAAI,QAAJ,SAAI,SAAA,SAAJ,KAAM,OAAO;AAElD,QAAI,CAAC,QAAQ,IAAI,QAAQ,GAAG;AAC1B,cAAQ,IAAI,UAAU,WAAW;;AAGnC,QAAI,CAAC,QAAQ,IAAI,eAAe,GAAG;AACjC,cAAQ,IAAI,iBAAiB,UAAU,aAAa;;AAGtD,WAAOA,OAAM,OAAK,OAAA,OAAA,OAAA,OAAA,CAAA,GAAO,IAAI,GAAA,EAAE,QAAO,CAAA,CAAA;EACxC,CAAC;AACH;;;ACnCM,SAAU,mBAAmB,KAAW;AAC5C,SAAO,IAAI,QAAQ,OAAO,EAAE;AAC9B;AAIM,SAAU,qBAMd,SACA,UAAoC;AAEpC,QAAM,EACJ,IAAI,WACJ,MAAM,aACN,UAAU,iBACV,QAAQ,cAAa,IACnB;AACJ,QAAM,EACJ,IAAIC,qBACJ,MAAMC,uBACN,UAAUC,2BACV,QAAQC,wBAAsB,IAC5B;AAEJ,SAAO;IACL,IAAE,OAAA,OAAA,OAAA,OAAA,CAAA,GACGH,mBAAkB,GAClB,SAAS;IAEd,MAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GACCC,qBAAoB,GACpB,WAAW;IAEhB,UAAQ,OAAA,OAAA,OAAA,OAAA,CAAA,GACHC,yBAAwB,GACxB,eAAe;IAEpB,QAAM,OAAA,OAAA,OAAA,OAAA,CAAA,GACDC,uBAAsB,GACtB,aAAa;;AAGtB;;;ACtDM,IAAO,qBAAP,cAAkC,aAAY;EAClD,YAAY,SAAkC;AAC5C,UAAM,OAAO;EACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACcF,IAAM,yBAAyB;EAC7B,SAAS;;AAGX,IAAM,qBAAqB;EACzB,QAAQ;;AAGV,IAAM,uBAAkD;EACtD,kBAAkB;EAClB,gBAAgB;EAChB,oBAAoB;EACpB,UAAU;;AAGZ,IAAM,2BAAkD,CAAA;AAOxD,IAAqB,iBAArB,MAAmC;;;;;;;;;;;;;EAwCjC,YACY,aACA,aACV,SAA2C;;AAFjC,SAAA,cAAA;AACA,SAAA,cAAA;AAGV,QAAI,CAAC;AAAa,YAAM,IAAI,MAAM,0BAA0B;AAC5D,QAAI,CAAC;AAAa,YAAM,IAAI,MAAM,0BAA0B;AAE5D,UAAM,eAAe,mBAAmB,WAAW;AAEnD,SAAK,cAAc,GAAG,2BAA2B,QAAQ,UAAU,IAAI;AACvE,SAAK,UAAU,GAAG;AAClB,SAAK,aAAa,GAAG;AACrB,SAAK,eAAe,GAAG;AAGvB,UAAM,oBAAoB,MAAM,IAAI,IAAI,KAAK,OAAO,EAAE,SAAS,MAAM,GAAG,EAAE,CAAC;AAC3E,UAAM,WAAW;MACf,IAAI;MACJ,UAAU;MACV,MAAI,OAAA,OAAA,OAAA,OAAA,CAAA,GAAO,oBAAoB,GAAA,EAAE,YAAY,kBAAiB,CAAA;MAC9D,QAAQ;;AAGV,UAAM,WAAW,qBAAqB,YAAO,QAAP,YAAO,SAAP,UAAW,CAAA,GAAI,QAAQ;AAE7D,SAAK,cAAa,MAAA,KAAA,SAAS,UAAI,QAAA,OAAA,SAAA,SAAA,GAAE,gBAAU,QAAA,OAAA,SAAA,KAAI;AAC/C,SAAK,WAAU,MAAA,KAAA,SAAS,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,aAAO,QAAA,OAAA,SAAA,KAAI,CAAA;AAE3C,SAAK,OAAO,KAAK,yBACf,KAAA,SAAS,UAAI,QAAA,OAAA,SAAA,KAAI,CAAA,GACjB,KAAK,UACL,KAAA,SAAS,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK;AAExB,SAAK,QAAQ,cAAc,aAAa,KAAK,gBAAgB,KAAK,IAAI,IAAG,KAAA,SAAS,YAAM,QAAA,OAAA,SAAA,SAAA,GAAE,KAAK;AAE/F,SAAK,WAAW,KAAK,oBAAmB,OAAA,OAAA,EAAG,SAAS,KAAK,QAAO,GAAK,SAAS,QAAQ,CAAA;AACtF,SAAK,OAAO,IAAI,gBAAgB,GAAG,wBAAwB;MACzD,SAAS,KAAK;MACd,SAAQ,KAAA,SAAS,QAAE,QAAA,OAAA,SAAA,SAAA,GAAE;MACrB,OAAO,KAAK;KACb;AAED,SAAK,qBAAoB;EAC3B;;;;EAKA,IAAI,YAAS;AACX,WAAO,IAAI,gBAAgB,KAAK,cAAc;MAC5C,SAAS,KAAK;MACd,aAAa,KAAK;KACnB;EACH;;;;EAKA,IAAI,UAAO;AACT,WAAO,IAAI,cAAsB,KAAK,YAAY,KAAK,SAAS,KAAK,KAAK;EAC5E;;;;;;EAeA,KAAK,UAAgB;AACnB,WAAO,KAAK,KAAK,KAAK,QAAQ;EAChC;;;;;;;;;;;;;;;;;;;;;;EAuBA,IAIE,IACA,OAA0B,CAAA,GAC1B,SAGC;AAUD,WAAO,KAAK,KAAK,IAAI,IAAI,MAAM,OAAO;EACxC;;;;;;;;EASA,QAAQ,MAAc,OAA+B,EAAE,QAAQ,CAAA,EAAE,GAAE;AACjE,WAAO,KAAK,SAAS,QAAQ,MAAM,IAAI;EACzC;;;;EAKA,cAAW;AACT,WAAO,KAAK,SAAS,YAAW;EAClC;;;;;;;EAQA,cAAc,SAAwB;AACpC,WAAO,KAAK,SAAS,cAAc,OAAO;EAC5C;;;;EAKA,oBAAiB;AACf,WAAO,KAAK,SAAS,kBAAiB;EACxC;EAEc,kBAAe;;;AAC3B,YAAM,EAAE,KAAI,IAAK,MAAM,KAAK,KAAK,WAAU;AAE3C,cAAO,MAAA,KAAA,KAAK,aAAO,QAAA,OAAA,SAAA,SAAA,GAAE,kBAAY,QAAA,OAAA,SAAA,KAAI;;;EAG/B,wBACN,EACE,kBACA,gBACA,oBACA,SACA,YACA,SAAQ,GAEV,SACAC,QAAa;AAEb,UAAM,cAAc;MAClB,eAAe,UAAU,KAAK;MAC9B,QAAQ,GAAG,KAAK;;AAElB,WAAO,IAAI,mBAAmB;MAC5B,KAAK,KAAK;MACV,SAAO,OAAA,OAAA,OAAA,OAAA,CAAA,GAAO,WAAW,GAAK,OAAO;MACrC;MACA;MACA;MACA;MACA;MACA;MACA,OAAAA;KACD;EACH;EAEQ,oBAAoB,SAA8B;AACxD,WAAO,IAAI,eAAe,KAAK,aAAW,OAAA,OAAA,OAAA,OAAA,CAAA,GACrC,OAAO,GAAA,EACV,QAAM,OAAA,OAAO,EAAE,QAAQ,KAAK,YAAW,GAAO,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,MAAM,EAAA,CAAA,CAAA;EAEjE;EAEQ,uBAAoB;AAC1B,QAAI,OAAO,KAAK,KAAK,kBAAkB,CAAC,OAAO,YAAW;AACxD,WAAK,oBAAoB,OAAO,YAAO,QAAP,YAAO,SAAA,SAAP,QAAS,cAAc,QAAQ;IACjE,CAAC;AACD,WAAO;EACT;EAEQ,oBACN,OACA,OACA,QAA4B;AAE5B,SACG,UAAU,qBAAqB,UAAU,gBAC1C,KAAK,uBAAuB,OAC5B;AAEA,WAAK,SAAS,QAAQ,UAAK,QAAL,UAAK,SAAL,QAAS,IAAI;AAEnC,WAAK,qBAAqB;eACjB,UAAU,cAAc;AAEjC,WAAK,SAAS,QAAQ,KAAK,WAAW;AACtC,UAAI,UAAU;AAAW,aAAK,KAAK,QAAO;AAC1C,WAAK,qBAAqB;;EAE9B;;;;AC5RK,IAAM,eAAe,CAS1B,aACA,aACA,YACgD;AAChD,SAAO,IAAI,eAAe,aAAa,aAAa,OAAO;AAC7D;",
  "names": ["crossFetch", "CrossFetchHeaders", "fetch", "DEFAULT_DB_OPTIONS", "DEFAULT_AUTH_OPTIONS", "DEFAULT_REALTIME_OPTIONS", "DEFAULT_GLOBAL_OPTIONS", "fetch"]
}
